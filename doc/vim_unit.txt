*vimUnit.txt*    A template to create vim and winmanager managed plugins.  v1.0


	vimUnit. A unit-testing framework targeting vim-scripts

==============================================================================
CONTENT                                                      *vimUnit-contents*
                                                                 *unit-testing* 
	Installation        : |vimUnit-installation|                  *unittesting* 
	Configuration       : |vimUnit-configuration|
	vimUnit intro       : |vimUnit|
	Requirements        : |vimUnit-requirements|
	vimUnit commands    : |vimUnit-commands|
	Tips                : |vimUnit-tips|
	Todo list           : |vimUnit-todo|
	Change log          : |vimUnit-change-log|

==============================================================================
1. vimUnit Installation                                 *vimUnit-installation*

    *Pathogen*

    Pathogen makes it pretty easy to do plugin installation. Ensure pathogen
    is installed and configured and then use git to checkout this:

    Command Line:
        git clone https://github.com/dsummersl/vimunit.git ~/.vim/bundle/vimunit

    *Vundle*

    Vundle is my preferred installation method as it makes it very easy to
    add/remove plugins. Edit your .vimrc file and update your plugins:

    ~/.vimrc
        Bundle 'dsummersl/vimunit'

    In Vim:
        :BundleInstall
	
==============================================================================
1.1 vimUnit Configuration                              *vimUnit-configuration*
															|vimUnit-content|
															
															*vimUnit-AutoRun*
															      *VUAutoRun*

	To ease testing of scripts there is a AutoRun (VUAutoRun()) routine. When 
	called from the commandline or a mapping of your preference it takes the 
	cursor position in the file and figure out if your inside a function 
	starting with 'Test'. If you are the file your in will be saved and sourced.
	Then the function will be called, and you get a printout of the statistics.
	So placing the cursor on call (in a vim file) inside the function:
	
		function! TestThis()
			call VUAssertTrue(TRUE(),'Simple test of true')	
		endfunction
		
	And calling:

		:call VUAutoRun()
		
	Will give you the statistics.
	
                                                           *vimUnit-verbosity*

    When we are running test cases to much output can be annoying. Turn
    message output off in your vimrc file with:

		let g:vimUnitVerbosity = 0

	Default value is 1.
                                                            *vimUnit-selftest*

	vimUnit has code to test that it work as expected. This code will run the 
	first time vim is running after you installed vimUnit. After that it will 
	only run again if there is changes to the vimUnit.vim file. If you want 
	vimUnit to do a self-test every time it is loaded (sourced) you should add
	this line to your vimrc file:

		let g:vimUnitSelfTest = 1

==============================================================================
1.1 vimUnit Requirements                                *vimUnit-requirements*
															|vimUnit-content|
	
	A vim7 environment (autoload feature), and basic unix tools: grep, head,
    tail.
	
==============================================================================
2. vimUnit Intro                                      *VU* *VimUnit* *vimUnit*
															|vimUnit-content|
	
	The philosophy behind test-first driven development is simple. 
	When you consider to write some code, you normally have an idea of what you
	want the code to do. Instead of just thinking of what your code should 
	do try to write down a test case formalizing your thoughts. When you have 
	a test case you start writing the code to make the test case complete 
	successfully. If you discover problem areas, or error conditions 
	write a test to make sure your code handles it. And will continue 
	to handle it the next time you make some changes.

	Example:

		"First we have an idea of how our function Cube should work
		func! TestCaseCube()
			call VUAssertEquals(<SID>Cube(1),1,'Trying to cube 1)')
			call VUAssertEquals(<SID>Cube(2),2*2*2,'Trying to cube 2)')
			call VUAssertEquals(<SID>Cube(3),3*3*3,'Trying to cube 3)')
		endfunc

		"We write ouer Cube Function
		func! <SID>Cube(arg1)
			let nFoo = arg1*arg1*arg1
			return nFoo
		endfunc
		
        "Best: run your tests outside of your vim editor:
        ~/.vim/bundle/vimunit/vutest.sh yourtestcases.vim

        "Next Best: run all the tests in your current buffer:
        "call VURunAllTests()

        "Next Best: if your cursor is within the test function:
        :call VUAutoRun()

        "Next Best: specify the function to test
        :call VURunnerRunTest('TestCaseCube')

==============================================================================
3. vimUnit Commands                                         *vimUnit-commands*
															|vimUnit-content|
	
    *Test* *Commands*

    vutest.sh - VimUnit comes with a convenient command to run your tests
                outside of your main editor.

    VURunAllTests - Run all the tests in your current file by running this
                    command.

    Older non fail-fast test methods: VUAutoRun, VURunnerRunTest.

    *Assertions*
	
	VUAssertEquals(ar1, arg2, ...)
		VUAssert that arg1 is equal in content to arg2.
	VUAssertTrue(arg1, ...)
		VUAssert that arg1 is true.
	VUAssertFalse(arg1, ...)
		VUAssert that arg1 is false.
	VUAssertNotNull(arg1, ...)
		VUAssert that arg1 is initiated.
	VUAssertNotSame(arg1, arg2, ...)
		VUAssert that arg1 and arg2 reference different memory.
	VUAssertSame(arg1, arg2, ...)
		VUAssert that arg1 and arg2 are from the same memory.
	VUAssertFail(...)
		Log a user defined failure.
	VULog(message)
        Log a message. These messages are displayed when g:vimUnitVerbosity is
        set to 1, and a test fails.
		
==============================================================================
5. vimUnit Tips                                                 *vimUnit-tips*
															|vimUnit-content|

    Use vutest.sh -- Testing your application inside your editor can
    problematic in that any window/global/etc variables that your functions
    under test setup will affect your future editing actions. Don't risk it.
    Use vutest.sh to run your tests in separate sessions outside of your main
    editor.

    Put test functions in a separate vim file. None of your normal plugin
    users will want to access your tests. Use autoload.
	
==============================================================================
6. vimUnit Todo list                                            *vimUnit-todo*   
															|vimUnit-content|

	TODO: Write more documentation
	TODO: Cleanup function header comments	

	TODO: TestResult methods are not implemented 		    
		TestResultAddError(test, ...)
		TestResultAddFailure(test, ...)
		TestResultAddListener(listener, ...)
		TestResultCloneListener()
		TestResultErrorCount()
		TestResultErrors()
		TestResultFailureCount()
		TestResultFailures()
		TestResultRemoveListener(listener, ...)
		TestResultRun(testCase, ...)
		TestResultRunCount()
		TestResultShouldStop()
		TestResultStartTest(test)
		TestResultStop()
		TestResultWasSuccessful()

==============================================================================
7. vimUnit Change log                                     *vimUnit-change-log*
															|vimUnit-content|
Developer reference: (break up mail address)
---------------------------------------------
SF = Staale Flock, staale -- lexholm .. no
DS = Dane Summers, dsummersl -- yahoo .. com

------------------------------------------------------------------------------
By	Date		Description, if version nr changes place it first.
------------------------------------------------------------------------------
DS	19 Dec 2012	1.0	Support for 'fail fast' unit tests. Added command line
                    program (vutest.sh) and a VURunAllTests.
SF	8 Nov 2004	0.1	Initial upload
==============================================================================
" Need the next formating line inside the help document
" vim: ts=4 sw=4 tw=78: 

 vim:tw=78:ts=8:ft=help:norl:
